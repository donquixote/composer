<?php

/*
 * This file is part of Composer.
 *
 * (c) Nils Adermann <naderman@naderman.de>
 *     Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Composer\Autoload;


use Composer\Config;

/**
 * @author Andreas hennings <andreas@dqxtech.net>
 */
class Build implements BuildInterface
{
    /**
     * PHP snippets for AutoloaderInit::getLoader().
     *
     * @var string[]
     */
    private $snippets = array();

    /**
     * @var string[]
     */
    private $arraySourceFiles = array();

    /**
     * @var string[]
     */
    private $methods = array();

    /**
     * Adds a PHP snippet to the AutoloaderInit::getLoader() method.
     *
     * @param string $snippet
     */
    public function addPhpSnippet($snippet)
    {
        $this->snippets[] = $snippet;
    }

    /**
     * Adds a php source file to be dumped in the vendor/composer/ directory.
     *
     * This file will have some headers automatically added.
     *
     * @param string $filename
     *   Name of the file, relative to vendor/composer/.
     * @param string $phpRows
     *   PHP code within the "return array(*)" statement.
     */
    public function addArraySourceFile($filename, $phpRows)
    {
        $this->arraySourceFiles[$filename] = $phpRows;
    }

    /**
     * Adds an additional method to the AutoloaderInit class.
     *
     * @param string $methodCode
     */
    public function addMethod($methodCode)
    {
        $this->methods[] = $methodCode;
    }

    /**
     * Generate the files.
     *
     * @param BuildDataInterface $buildData
     *
     * @return string[]
     *   File contents by file path.
     */
    public function generateFiles(BuildDataInterface $buildData)
    {
        $targetDir = $buildData->getTargetDir();
        $vendorPath = $buildData->getVendorPath();
        $vendorPathCode52 = $buildData->getVendorPathCode52();
        $appBaseDirCode = $buildData->getAppDirBaseCode();

        $files = array();
        foreach ($this->arraySourceFiles as $filename => $phpRows) {
            $files[$targetDir . '/' . $filename] = <<<EOT
<?php

// $filename @generated by Composer

\$vendorDir = $vendorPathCode52;
\$baseDir = $appBaseDirCode;

return array(
$phpRows);

EOT;
        }

        $files[$targetDir . '/autoload_real.php'] = $this->getAutoloadRealFile($buildData);
        $files[$vendorPath . '/autoload.php'] = $this->getAutoloadFile($buildData);

        return $files;
    }

    /**
     * @param BuildDataInterface $buildData
     *
     * @return string
     */
    private function getAutoloadRealFile(BuildDataInterface $buildData)
    {
        $suffix = $buildData->getSuffix();
        $snippetsCode = implode('', $this->snippets);
        $methodsCode = implode('', $this->methods);

        $snippetsCode .= <<<EOT
        return \$loader;
EOT;

        return <<<EOT
<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit$suffix
{
    private static \$loader;

    public static function loadClassLoader(\$class)
    {
        if ('Composer\\Autoload\\ClassLoader' === \$class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
$snippetsCode
    }
$methodsCode}

EOT;
    }

    /**
     * @param BuildDataInterface $buildData
     *
     * @return string
     */
    protected function getAutoloadFile(BuildDataInterface $buildData)
    {
        $suffix = $buildData->getSuffix();
        $vendorPathToTargetDirCode = $buildData->getVendorPathToTargetDirCode();

        return <<<EOT
<?php

// autoload.php @generated by Composer

require_once $vendorPathToTargetDirCode . '/autoload_real.php';

return ComposerAutoloaderInit$suffix::getLoader();

EOT;
    }
}
